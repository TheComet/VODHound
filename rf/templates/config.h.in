#pragma once

/* Options ----------------------------------------------------------------- */

#cmakedefine RF_BTREE_64BIT_KEYS
#cmakedefine RF_BTREE_64BIT_CAPACITY
#cmakedefine RF_MEM_BACKTRACE
#cmakedefine RF_MEM_DEBUGGING
#cmakedefine RF_TESTS
#cmakedefine RF_VEC_64BIT_CAPACITY

#define RF_${RF_LIB_TYPE}
#define RF_BTREE_EXPAND_FACTOR    ${RF_BTREE_EXPAND_FACTOR}
#define RF_BTREE_MIN_CAPACITY     ${RF_BTREE_MIN_CAPACITY}
#define RF_HM_EXPAND_FACTOR       ${RF_HM_EXPAND_FACTOR}
#define RF_HM_MIN_CAPACITY        ${RF_HM_MIN_CAPACITY}
#define RF_HM_REHASH_AT_PERCENT   ${RF_HM_REHASH_AT_PERCENT}
#define RF_MEM_BACKTRACE_SIZE     ${RF_MEM_BACKTRACE_SIZE}
#define RF_VEC_EXPAND_FACTOR      ${RF_VEC_EXPAND_FACTOR}
#define RF_VEC_MIN_CAPACITY       ${RF_VEC_MIN_CAPACITY}u

#define RF_THREADLOCAL ${RF_THREADLOCAL}

/* Symbol visibility ------------------------------------------------------- */
#if defined(RF_SHARED)
#   if defined(RF_BUILDING)
#       define RF_PUBLIC_API ${RF_API_EXPORT}
#   else
#       define RF_PUBLIC_API ${RF_API_IMPORT}
#   endif
#   define RF_PRIVATE_API ${RF_API_LOCAL}
#else
#   define RF_PUBLIC_API
#   define RF_PRIVATE_API
#endif

/* Version string ---------------------------------------------------------- */
#define RF_VERSION_MAJOR ${PROJECT_VERSION_MAJOR}
#define RF_VERSION_MINOR ${PROJECT_VERSION_MINOR}
#define RF_VERSION_PATCH ${PROJECT_VERSION_PATCH}
#define RF_VERSION_STR \
        RF_STRINGIFY(RF_VERSION_MAJOR) "." RF_STRINGIFY(RF_VERSION_MINOR) "." RF_STRINGIFY(RF_VERSION_PATCH)

#define RF_VERSION \
        ((RF_VERSION_MAJOR << 24) | (RF_VERSION_MINOR << 16) | (RF_VERSION_PATCH << 8) | /* release candidate */ 0)

/* C++ macros -------------------------------------------------------------- */
#if defined(__cplusplus)
#   define C_BEGIN extern "C" {
#   define C_END }
#else
#   define C_BEGIN
#   define C_END
#endif

/* printf formatting ------------------------------------------------------- */
#if defined(__GNUC__) || defined(__clang__)
#   define RF_PRINTF_FORMAT(fmt, params) __attribute__((format(printf, fmt, params)))
#else
#   define RF_PRINTF_FORMAT(fmt, params)
#endif
