%option prefix="newdb"
%option malloc="mem_alloc"
%option free="mem_free"

%header-preamble {
#include "vh/config.h"
#include "vh/str.h"
#include <stdint.h>

C_BEGIN
}

%source-includes{
#include "vh/db.h"
#include "vh/log.h"
#include "vh/mem.h"
#include "vh/mfile.h"
#include "sqlite/sqlite3.h"
#include <ctype.h>
}

%header-postamble {
VH_PUBLIC_API struct newdb_interface*
newdb(const char* type);

VH_PRIVATE_API int
newdb_init(void);

VH_PRIVATE_API void
newdb_deinit(void);

C_END
}
/*
%function migrate(int reinit_db) {
    return check_version_and_migrate(ctx->db, reinit_db);
}
%query motion,add(uint64_t hash40, struct str_view string) {
    type insert
    table motions
}
%query motion,exists(uint64_t hash40) {
    type exists
    table motions
}
%query motion_label,add_or_get_group(struct str_view name) {
    type insert
    table motion_groups
    return id
}
%query motion_label,add_or_get_layer(int group_id, struct str_view name) {
    type insert
    stmt {
        WITH priorities AS (
            WITH list(id) AS (VALUES(0))
            SELECT IFNULL(priority, 0) + 1 priority FROM test
            FULL OUTER JOIN list USING(id)
            ORDER BY priority DESC LIMIT 1)
        INSERT INTO motion_layers (group_id, priority, name)
        VALUES (?, (SELECT priority FROM priorities), ?)
        ON CONFLICT DO UPDATE SET group_id=excluded.group_id
        RETURNING id;
    }
    return id
}
%query motion_label,add_or_get_category(struct str_view name) {
    type insert
    table motion_categories
    return id
}
%query motion_label,add_or_get_usage(struct str_view name) {
    type insert
    table motion_usages
    return id
}
%query motion_label,add_or_get_label(
        uint64_t hash40,
        int fighter_id,
        int layer_id,
        int category_id,
        int usage_id,
        struct str_view label) {
    type insert
    table motion_labels
    return id
}
%query motion_label,to_motions(int fighter_id, struct str_view label) {
    type select-first
    table motion_labels
    callback uint64_t hash40
}
%query motion_label,to_notation_label(int fighter_id, uint64_t hash40, int usage_id) {
    type select-first
    stmt {
        SELECT label FROM motion_labels
        JOIN motion_layers ON motion_layers.id=motion_labels.layer_id
        WHERE fighter_id=? AND hash40=? AND usage_id=? AND label <> ''
        ORDER BY priority ASC
        LIMIT 1;
    }
    callback const char* label
}
%query fighter,add(int id, struct str_view name) {
    type insert
    table fighters
}
%query fighter,get_name(int id) {
    type select-first
    table fighters
    callback const char* name
}
%query stage,add(int id, struct str_view name) {
    type insert
    table stages
}
%query status_enum,add(int fighter_id null, int value, struct str_view name) {
    type insert
    table status_enums
}
%query hit_status_enum,add(int id, struct str_view name) {
    type insert
    table hit_status_enums
}
%query tournament,add_or_get(struct str_view name, struct str_view website) {
    type insert
    table tournaments
    return id
}
%query tournament,add_sponsor(int tournament_id, int sponsor_id) {
    type insert
    table tournament_sponsors
}
%query tournament,add_organizer(int tournament_id, int person_id) {
    type insert
    table tournament_organizers
}
%query tournament,add_commentator(int tournament_id, int person_id) {
    type insert
    table tournament_commentators
}
%query event,add_or_get_type(struct str_view name) {
    type insert
    table event_types
    return id
}
%query event,add_or_get(int event_type_id, struct str_view url) {
    type insert
    table event_types
    return id
}
%query round,add_or_get_type(struct str_view short_name, struct str_view long_name) {
    type insert
    table round_types
    return id
}
%query set_format,add_or_get(struct str_view short_name, struct str_view long_name) {
    type insert
    table set_formats
    return id
}
%query team,add_or_get(struct str_view short_name, struct str_view url) {
    type insert
    table teams
    return id
}
%query team,add_member(int team_id, int person_id) {
    type insert
    table teams
}
%query sponsor,add_or_get(
        int sponsor_id,
        struct str_view name,
        struct str_view tag,
        struct str_view social,
        struct str_view pronouns) {
    type insert
    table sponsors
    return id
}
%query person,add_or_get(struct str_view short_name, struct str_view full_name, struct str_view website) {
    type insert
    table people
    callback int id, int sponsor_id, const char* name, const char* tag, const char* social, const char* pronouns
}
%query person,get_id_from_name(struct str_view name) {
    type select-first
    table people
    return id
}
%query person,get_team_id_from_name(struct str_view name) {
    type select-first
    stmt {
        SELECT team_id
        FROM team_members
        JOIN people ON team_members.person_id=people.id
        WHERE name=?;
    }
    return team_id
}
%query person,set_tag(int id, struct str_view tag) {
    type update tag
    table people
}
%query person,set_social(int id, struct str_view social) {
    type update social
    table people
}
%query person,set_pronouns(int id, struct str_view pronouns) {
    type update pronouns
    table people
}
%query game,add_or_get(
        int round_type_id null,
        int round_number null,
        int set_format_id,
        int winner_team_id,
        int stage_id,
        uint64_t time_started,
        int duration) {
    type insert
    table games
    return id
}
%query game,get_all() {
    type select-all
    stmt {
        WITH grouped_games AS (
            SELECT
                games.id,
                time_started,
                duration,
                round_type_id,
                round_number,
                set_format_id,
                winner_team_id,
                stage_id,
                teams.name team_name,
                IFNULL(scores.score, '') scores,
                group_concat(game_players.slot, '+') slots,
                group_concat(REPLACE(IFNULL(sponsors.short_name, ''), '+', '\\+'), '+') sponsors,
                group_concat(REPLACE(people.name, '+', '\\+'), '+') players,
                group_concat(REPLACE(IFNULL(fighters.name, game_players.fighter_id), '+', '\\+'), '+') fighters,
                group_concat(game_players.costume, '+') costumes
            FROM game_players
            INNER JOIN games ON games.id = game_players.game_id
            INNER JOIN teams ON teams.id = game_players.team_id
            LEFT JOIN scores ON scores.team_id = game_players.team_id AND scores.game_id = game_players.game_id
            INNER JOIN people ON people.id = game_players.person_id
            LEFT JOIN fighters ON fighters.id = game_players.fighter_id
            LEFT JOIN sponsors ON sponsors.id = people.sponsor_id
            GROUP BY games.id, game_players.team_id
            ORDER BY game_players.slot)
        SELECT
            grouped_games.id,
            time_started,
            duration,
            IFNULL(tournaments.name, '') tourney,
            IFNULL(event_types.name, '') event,
            IFNULL(stages.name, grouped_games.stage_id) stage,
            IFNULL(round_types.short_name, '') || IFNULL(round_number, '') round,
            set_formats.short_name format,
            group_concat(REPLACE(grouped_games.team_name, ',', '\\,')) teams,
            group_concat(grouped_games.scores) score,
            group_concat(grouped_games.slots) slots,
            group_concat(REPLACE(IFNULL(grouped_games.sponsors, ''), ',', '\\,')) sponsors,
            group_concat(REPLACE(grouped_games.players, ',', '\\,')) players,
            group_concat(REPLACE(grouped_games.fighters, ',', '\\,')) fighters,
            group_concat(grouped_games.costumes) costumes
        FROM grouped_games
        LEFT JOIN tournament_games ON tournament_games.game_id = grouped_games.id
        LEFT JOIN tournaments ON tournament_games.tournament_id = tournaments.id
        LEFT JOIN event_games ON event_games.game_id = grouped_games.id
        LEFT JOIN events ON event_games.event_id = events.id
        LEFT JOIN event_types ON event_types.id = events.event_type_id
        LEFT JOIN stages ON stages.id = grouped_games.stage_id
        LEFT JOIN round_types ON grouped_games.round_type_id = round_types.id
        INNER JOIN set_formats ON grouped_games.set_format_id = set_formats.id
        GROUP BY grouped_games.id
        ORDER BY time_started DESC;
    }
    callback
        int game_id,
        uint64_t time_started,
        int duration,
        const char* tournament,
        const char* event,
        const char* stage,
        const char* round,
        const char* format,
        const char* teams,
        const char* scores,
        const char* slots,
        const char* sponsors,
        const char* players,
        const char* fighters,
        const char* costumes
}
%query game,get_events() {
    type select-all
    stmt {
        SELECT
            DATE(time_started/1000, 'unixepoch') date,
            IFNULL(event_types.name, ''),
            IFNULL(event_id, -1)
        FROM games
        LEFT JOIN event_games ON event_games.game_id=games.id
        LEFT JOIN events ON events.id=event_id
        LEFT JOIN event_types ON event_types.id=event_type_id
        GROUP BY date, event_types.name
        ORDER BY event_types.name;
    }
    callback
        const char* date,
        const char* name,
        int event_id
}
%query game,get_all_in_event(int event_id, struct str_view date) {
    /*
     * We do a hack here of the form
     *   SELECT * FROM table, (SELECT ? AS id) target
     *   WHERE (table.event_id = target.id OR table.event_id IS target.id);
     * Because we would like the be able to match NULL as well as regular
     * values within the same statement. The reason for not using two ? here
     * is because the code generator does not support binding the same value
     * twice, so we bind it once into a subquery.
     *
    type select-all
    stmt {
        WITH grouped_games AS (
            SELECT
                event_id,
                (SELECT ? AS id) target_event,
                games.id,
                time_started,
                duration,
                round_type_id,
                round_number,
                set_format_id,
                winner_team_id,
                stage_id,
                teams.name team_name,
                IFNULL(scores.score, '') scores,
                group_concat(game_players.slot, '+') slots,
                group_concat(REPLACE(IFNULL(sponsors.short_name, ''), '+', '\\+'), '+') sponsors,
                group_concat(REPLACE(people.name, '+', '\\+'), '+') players,
                group_concat(REPLACE(IFNULL(fighters.name, game_players.fighter_id), '+', '\\+'), '+') fighters,
                group_concat(game_players.costume, '+') costumes
            FROM game_players
            INNER JOIN games ON games.id = game_players.game_id
            INNER JOIN teams ON teams.id = game_players.team_id
            LEFT JOIN scores ON scores.team_id = game_players.team_id AND scores.game_id = game_players.game_id
            INNER JOIN people ON people.id = game_players.person_id
            LEFT JOIN fighters ON fighters.id = game_players.fighter_id
            LEFT JOIN sponsors ON sponsors.id = people.sponsor_id
            GROUP BY games.id, game_players.team_id
            ORDER BY game_players.slot)
        SELECT
            grouped_games.id,
            time_started,
            duration,
            IFNULL(tournaments.name, '') tourney,
            IFNULL(event_types.name, '') event,
            IFNULL(stages.name, grouped_games.stage_id) stage,
            IFNULL(round_types.short_name, '') || IFNULL(round_number, '') round,
            set_formats.short_name format,
            group_concat(REPLACE(grouped_games.team_name, ',', '\\,')) teams,
            group_concat(grouped_games.scores) score,
            group_concat(grouped_games.slots) slots,
            group_concat(REPLACE(IFNULL(grouped_games.sponsors, ''), ',', '\\,')) sponsors,
            group_concat(REPLACE(grouped_games.players, ',', '\\,')) players,
            group_concat(REPLACE(grouped_games.fighters, ',', '\\,')) fighters,
            group_concat(grouped_games.costumes) costumes
        FROM grouped_games
        LEFT JOIN tournament_games ON tournament_games.game_id = grouped_games.id
        LEFT JOIN tournaments ON tournament_games.tournament_id = tournaments.id
        LEFT JOIN event_games ON event_games.game_id = grouped_games.id
        LEFT JOIN events ON event_games.event_id = events.id
        LEFT JOIN event_types ON event_types.id = events.event_type_id
        LEFT JOIN stages ON stages.id = grouped_games.stage_id
        LEFT JOIN round_types ON grouped_games.round_type_id = round_types.id
        INNER JOIN set_formats ON grouped_games.set_format_id = set_formats.id
        WHERE
            DATE(time_started/1000, 'unixepoch') = ?
            AND (event_id IS target_event.d OR event_id = target_event.id)
        GROUP BY grouped_games.id
        ORDER BY time_started DESC;
    }
    callback
        int game_id,
        uint64_t time_started,
        int duration,
        const char* tournament,
        const char* event,
        const char* stage,
        const char* round,
        const char* format,
        const char* teams,
        const char* scores,
        const char* slots,
        const char* sponsors,
        const char* players,
        const char* fighters,
        const char* costumes
}
%query game,associate_tournament(int game_id, int tournament_id) {
    type insert
    table tournament_games
}
%query game,associate_event(int game_id, int event_id) {
    type insert
    table event_games
}
%query game,associate_video(int game_id, int video_id, int64_t frame_offset) {
    type insert
    table game_videos
}
%query game,unassociate_video(int game_id, int video_id) {
    type delete
    table game_videos
}
%query game,get_videos(int game_id) {
    type select-all
    stmt {
        SELECT file_name, path_hint, frame_offset
        FROM game_videos
        JOIN videos ON game_videos.video_id = videos.id
        WHERE game_videos.game_id = ?;
    }
    callback const char* file_path, const char* path_hint, int64_t frame_offset
}
%query game,add_player(
        int person_id,
        int game_id,
        int slot,
        int team_id,
        int fighter_id,
        int costume,
        int is_loser_side) {
    type insert
    table game_players
}
%query group,add_or_get(struct str_view name) {
    type insert
    table groups
    return id
}
%query group,add_game(int group_id, int game_id) {
    type insert
    table game_groups
}
%query video,add_or_get(struct str_view file_name, struct str_view path_hint) {
    type insert
    table videos
    return id
}
%query video,set_path_hint(struct str_view file_name, struct str_view path_hint) {
    type update path_hint
    table videos
}
%query video,add_path(struct str_view path) {
    type insert
    table video_paths
}
%query video,get_paths() {
    type select-all
    table video_paths
    callback const char* path
}
%query score,add(int game_id, int team_id, int score) {
    type insert
    table scores
}
%query switch_info,add(struct str_view name, struct str_view ip, uint16_t port) {
    type insert
    table switch_info
}
%query stream_recording_sources,add(struct str_view path, int64_t frame_offset) {
    type insert
    table stream_recording_sources
}
*/
%query test(int id) {
    type select-all
    table test
    callback const char* name
}

%source-preamble {
static int
exec_sql_wrapper(sqlite3* db, const char* sql)
{
    char* error_message;
    int ret = sqlite3_exec(db, sql, NULL, NULL, &error_message);
    if (ret != SQLITE_OK)
    {
        log_sqlite_err(ret, error_message, sqlite3_errmsg(db));
        sqlite3_free(error_message);
        return -1;
    }
    return 0;
}

static int
run_migration_script(sqlite3* db, const char* file_name)
{
    int ret;
    struct mfile mf;
    sqlite3_stmt* stmt;
    const char* sql;
    const char* sql_next;
    int sql_len;

    if (mfile_map(&mf, file_name) != 0)
        goto open_script_failed;

    sql = mf.address;
    sql_len = mf.size;

    log_info("Running migration script '%s'\n", file_name);

next_step:
    ret = sqlite3_prepare_v2(db, sql, sql_len, &stmt, &sql_next);
    if (ret != SQLITE_OK)
    {
        log_sqlite_err(ret, sqlite3_errstr(ret), sqlite3_errmsg(db));
        goto prepare_failed;
    }
retry_step:
    switch (ret = sqlite3_step(stmt))
    {
        case SQLITE_BUSY:
            goto retry_step;
        case SQLITE_ROW:
        case SQLITE_DONE:
            sql_len -= (int)(sql_next - sql);
            sql = sql_next;
            for (; sql_len && isspace(*sql); ++sql, --sql_len) {}
            if (sql_len <= 0)
                break;
            sqlite3_finalize(stmt);
            goto next_step;
        default:
            log_sqlite_err(ret, sqlite3_errstr(ret), sqlite3_errmsg(db));
            goto exec_failed;
    }

    sqlite3_finalize(stmt);
    mfile_unmap(&mf);
    return 0;

    exec_failed        : sqlite3_finalize(stmt);
    prepare_failed     : mfile_unmap(&mf);
    open_script_failed : return -1;
}

static int
check_version_and_migrate(sqlite3* db, int reinit_db)
{
    int ret;
    int version;
    sqlite3_stmt* stmt;

    ret = sqlite3_prepare_v2(db, "PRAGMA user_version", -1, &stmt, NULL);
    if (ret != SQLITE_OK)
    {
        log_sqlite_err(ret, sqlite3_errstr(ret), sqlite3_errmsg(db));
        return -1;
    }

    ret = sqlite3_step(stmt);
    if (ret != SQLITE_ROW)
    {
        log_sqlite_err(ret, sqlite3_errstr(ret), sqlite3_errmsg(db));
        sqlite3_finalize(stmt);
        return -1;
    }

    version = sqlite3_column_int(stmt, 0);
    sqlite3_finalize(stmt);
    log_dbg("db version: %d\n", version);

    if (exec_sql_wrapper(db, "BEGIN TRANSACTION") != 0)
        return -1;

    if (reinit_db)
    {
        log_note("Downgrading db to version 0\n");
        switch (version)
        {
            case 1: if (run_migration_script(db, "migrations/1-schema.down.sql") != 0) goto migrate_failed;
            case 0: break;
        }
        version = 0;
    }

    switch (version)
    {
        case 0: if (run_migration_script(db, "migrations/1-schema.up.sql") != 0) goto migrate_failed;
        /*case 1: if (upgrade_to_v2(db) != 0) goto migrate_failed;
        case 2: if (upgrade_to_v3(db) != 0) goto migrate_failed;*/
        case 1: break;

        default:
            log_err("Unknown database version %d. Aborting all operations\n", version);
            goto migrate_failed;
    }

    if (exec_sql_wrapper(db, "PRAGMA user_version=1") != 0)
        goto migrate_failed;

    if (exec_sql_wrapper(db, "COMMIT TRANSACTION") != 0)
        goto migrate_failed;

    log_note("Successfully migrated from version %d to version 1\n", version);

    return 0;

    migrate_failed : exec_sql_wrapper(db, "ROLLBACK TRANSACTION");
    return -1;
}
}

%source-postamble {
struct newdb_interface* newdb(const char* type)
{
    if (strcmp("sqlite", type) == 0)
        return &db_sqlite;
    return NULL;
}

#if defined(VH_MEM_DEBUGGING)
static void* dbgmem_malloc(int size) { return mem_alloc((mem_size)size); }
static void* dbgmem_realloc(void* p, int size) { return mem_realloc(p, (mem_size)size); }
static int dbgmem_allocated_size(void* p) { return (int)mem_allocated_size(p); }
static int dbgmem_roundup(int size) { return size; }
static int dbgmem_init(void* user) { (void)user; return 0; }
static void dbgmem_deinit(void* user) { (void)user; }

static struct sqlite3_mem_methods vh_mem_sqlite = {
    dbgmem_malloc,
    mem_free,
    dbgmem_realloc,
    dbgmem_allocated_size,
    dbgmem_roundup,
    dbgmem_init,
    dbgmem_deinit,
    NULL
};
#endif

int
newdb_init(void)
{
#if defined(VH_MEM_DEBUGGING)
    sqlite3_config(SQLITE_CONFIG_MALLOC, &vh_mem_sqlite);
#endif

    if (sqlite3_initialize() != SQLITE_OK)
        return -1;
    return 0;
}

void
newdb_deinit(void)
{
    sqlite3_shutdown();
}
}
