%option prefix="db"
%option malloc="mem_alloc"
%option free="mem_free"
%option log-dbg="log_dbg"
%option log-error="log_err"
%option log-sql-error="log_sql_err"
%option custom-init
%option custom-deinit
%option custom-api-decl
//%option debug-layer

%header-preamble {
#include "vh/config.h"
#include "vh/str.h"
#include <stdint.h>

C_BEGIN
}

%source-includes{
#include "vh/db.h"
#include "vh/log.h"
#include "vh/mem.h"
#include "vh/mfile.h"
#include "sqlite/sqlite3.h"
#include <ctype.h>
#include <inttypes.h>
}

%header-postamble {
VH_PRIVATE_API int
db_init(void);

VH_PRIVATE_API void
db_deinit(void);

VH_PUBLIC_API struct db_interface*
db(const char* backend);

C_END
}

%upgrade 1 {
-- Maps SSBU stage IDs (they start at index 0) to readable stage names.
-- The stage names are user-defined, and are used in queries and are
-- displayed in the UI. The table is initialized from a list of predefined
-- handwritten names.
CREATE TABLE IF NOT EXISTS stages (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL
);
-- Maps SSBU fighter IDs (starting at index 0) to readable fighter names.
-- The fighter names are user-defined, and are used in queries and are
-- displayed in the UI. The table is initialized from a list of predefined
-- handwritten names.
CREATE TABLE IF NOT EXISTS fighters (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL
);
-- Maps "hit status" values to their symbol name (extracted from the game).
-- Example:
CREATE TABLE IF NOT EXISTS hit_status_enums (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS status_enums (
    id INTEGER PRIMARY KEY NOT NULL,
    fighter_id INTEGER,
    value INTEGER NOT NULL,
    name TEXT NOT NULL,
    FOREIGN KEY (fighter_id) REFERENCES fighters(id)
);
CREATE TABLE IF NOT EXISTS motions (
    hash40 INTEGER PRIMARY KEY NOT NULL,
    string TEXT NOT NULL,
    UNIQUE(string)
);
CREATE TABLE IF NOT EXISTS motion_groups (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    UNIQUE(name)
);
CREATE TABLE IF NOT EXISTS motion_layers (
    id INTEGER PRIMARY KEY NOT NULL,
    group_id INTEGER NOT NULL,
    priority INTEGER NOT NULL,
    name TEXT NOT NULL,
    UNIQUE(group_id, name),
    FOREIGN KEY (group_id) REFERENCES motion_groups(id)
);
CREATE TABLE IF NOT EXISTS motion_categories (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    UNIQUE(name)
);
CREATE TABLE IF NOT EXISTS motion_usages (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    UNIQUE(name)
);
INSERT OR REPLACE INTO motion_usages (id, name) VALUES
    (0, 'Readable'),
    (1, 'Notation'),
    (2, 'Categorization');
CREATE TABLE IF NOT EXISTS motion_labels (
    id INTEGER PRIMARY KEY NOT NULL,
    hash40 INTEGER NOT NULL,
    fighter_id INTEGER NOT NULL,
    layer_id INTEGER NOT NULL,
    category_id INTEGER NOT NULL,
    usage_id INTEGER NOT NULL,
    label TEXT NOT NULL,
    FOREIGN KEY (hash40) REFERENCES motions(hash40),
    FOREIGN KEY (fighter_id) REFERENCES fighters(id),
    FOREIGN KEY (layer_id) REFERENCES motion_layers(id),
    FOREIGN KEY (category_id) REFERENCES motion_categories(id),
    FOREIGN KEY (usage_id) REFERENCES motion_usages(id)
);
CREATE TABLE IF NOT EXISTS videos (
    id INTEGER PRIMARY KEY NOT NULL,
    file_name TEXT NOT NULL,
    path_hint TEXT NOT NULL,
    UNIQUE (file_name)
);
CREATE TABLE IF NOT EXISTS video_paths (
    path TEXT NOT NULL,
    UNIQUE (path)
);
CREATE TABLE IF NOT EXISTS sponsors (
    id INTEGER PRIMARY KEY NOT NULL,
    short_name TEXT NOT NULL,
    full_name TEXT NOT NULL,
    website TEXT NOT NULL,
    CHECK (short_name <> '' OR full_name <> ''),
    UNIQUE (short_name, full_name, website)
);
CREATE TABLE IF NOT EXISTS people (
    id INTEGER PRIMARY KEY NOT NULL,
    sponsor_id INTEGER,
    name TEXT NOT NULL,
    tag TEXT NOT NULL,
    social TEXT NOT NULL,
    pronouns TEXT NOT NULL,
    FOREIGN KEY (sponsor_id) REFERENCES sponsors(id),
    UNIQUE (name, tag),
    CHECK (name <> '')
);
CREATE TABLE IF NOT EXISTS tournaments (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    website TEXT NOT NULL,
    UNIQUE (name, website),
    CHECK (name <> '')
);
CREATE TABLE IF NOT EXISTS tournament_organizers (
    tournament_id INTEGER NOT NULL CHECK (tournament_id > 0),
    person_id INTEGER NOT NULL CHECK (person_id > 0),
    UNIQUE (tournament_id, person_id)
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id),
    FOREIGN KEY (person_id) REFERENCES people(id)
);
CREATE TABLE IF NOT EXISTS tournament_sponsors (
    tournament_id INTEGER NOT NULL CHECK (tournament_id > 0),
    sponsor_id INTEGER NOT NULL CHECK (sponsor_id > 0),
    UNIQUE (tournament_id, sponsor_id),
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id),
    FOREIGN KEY (sponsor_id) REFERENCES sponsors(id)
);
CREATE TABLE IF NOT EXISTS tournament_commentators (
    tournament_id INTEGER NOT NULL CHECK (tournament_id > 0),
    person_id INTEGER NOT NULL CHECK (person_id > 0),
    UNIQUE (tournament_id, person_id),
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id),
    FOREIGN KEY (person_id) REFERENCES people(id)
);
CREATE TABLE IF NOT EXISTS set_formats (
    id INTEGER PRIMARY KEY NOT NULL,
    short_name TEXT NOT NULL,
    long_name TEXT NOT NULL,
    UNIQUE (short_name),
    UNIQUE (long_name)
);
CREATE TABLE IF NOT EXISTS event_types (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    UNIQUE (name)
);
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY NOT NULL,
    event_type_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    UNIQUE (event_type_id, url),
    FOREIGN KEY (event_type_id) REFERENCES event_types(id)
);
CREATE TABLE IF NOT EXISTS round_types (
    id INTEGER PRIMARY KEY NOT NULL,
    short_name TEXT NOT NULL,
    long_name TEXT NOT NULL,
    UNIQUE (short_name),
    UNIQUE (long_name)
);
CREATE TABLE IF NOT EXISTS teams (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    UNIQUE (name, url)
);
CREATE TABLE IF NOT EXISTS team_members (
    team_id INTEGER NOT NULL,
    person_id INTEGER NOT NULL,
    UNIQUE (team_id, person_id),
    FOREIGN KEY (team_id) REFERENCES teams(id),
    FOREIGN KEY (person_id) REFERENCES people(id)
);
CREATE TABLE IF NOT EXISTS games (
    id INTEGER PRIMARY KEY NOT NULL,
    -- Round type only exists for brackets.
    -- For Money match, Practice, Amateurs etc. this will be NULL.
    round_type_id INTEGER,
    -- Round number is NULL when the round type is semi-finals, finals, or any
    -- other type that doesn't need a number.
    round_number INTEGER,
    set_format_id INTEGER NOT NULL,
    winner_team_id INTEGER NOT NULL,
    stage_id INTEGER NOT NULL,
    time_started TIMESTAMP NOT NULL,
    duration INTEGER NOT NULL,
    FOREIGN KEY (round_type_id) REFERENCES round_types(id),
    FOREIGN KEY (set_format_id) REFERENCES set_formats(id),
    FOREIGN KEY (winner_team_id) REFERENCES teams(id),
    FOREIGN KEY (stage_id) REFERENCES stages(id),
    CHECK (round_type_id > 0),
    CHECK (round_number > 0),
    CHECK (set_format_id > 0),
    CHECK (winner_team_id > 0),
    CHECK (stage_id > -1)  -- Stage 0 is valid
);
CREATE TABLE IF NOT EXISTS tournament_games (
    game_id INTEGER NOT NULL,
    tournament_id INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES games(id),
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id),
    UNIQUE (game_id)
);
CREATE TABLE IF NOT EXISTS event_games (
    game_id INTEGER NOT NULL,
    event_id INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES games(id),
    FOREIGN KEY (event_id) REFERENCES events(id),
    UNIQUE (game_id)
);
CREATE TABLE IF NOT EXISTS game_players (
    person_id INTEGER NOT NULL,
    game_id INTEGER NOT NULL,
    slot INTEGER NOT NULL,
    team_id INTEGER NOT NULL,
    fighter_id INTEGER NOT NULL,
    costume INTEGER NOT NULL,
    is_loser_side BOOLEAN NOT NULL CHECK (is_loser_side IN (0, 1)),
    UNIQUE (person_id, game_id),
    FOREIGN KEY (person_id) REFERENCES people(id),
    FOREIGN KEY (game_id) REFERENCES games(id),
    FOREIGN KEY (team_id) REFERENCES teams(id),
    FOREIGN KEY (fighter_id) REFERENCES fighters(id)
);
CREATE TABLE IF NOT EXISTS game_videos (
    game_id INTEGER NOT NULL,
    video_id INTEGER NOT NULL,
    frame_offset INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES games(id),
    FOREIGN KEY (video_id) REFERENCES videos(id),
    UNIQUE (game_id, video_id)
);
CREATE TABLE IF NOT EXISTS groups (
    id INTEGER NOT NULL,
    name TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS game_groups (
    game_id INTEGER NOT NULL,
    group_id INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES games(id),
    FOREIGN KEY (group_id) REFERENCES groups(id),
    UNIQUE (game_id, group_id)
);
CREATE TABLE IF NOT EXISTS scores (
    game_id INTEGER NOT NULL,
    team_id INTEGER NOT NULL,
    score INTEGER NOT NULL CHECK (score >= 0),
    UNIQUE (game_id, team_id, score),
    FOREIGN KEY (game_id) REFERENCES games(id),
    FOREIGN KEY (team_id) REFERENCES teams(id)
);
CREATE TABLE IF NOT EXISTS switch_info (
    id INTEGER PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    ip TEXT NOT NULL,
    port INTEGER NOT NULL
);
CREATE TABLE IF NOT EXISTS stream_recording_sources (
    id INTEGER PRIMARY KEY NOT NULL,
    path TEXT NOT NULL,
    frame_offset INTEGER NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS idx_motions_hash40 ON motions(hash40);
CREATE INDEX IF NOT EXISTS idx_games_timestamps ON games(time_started);
CREATE INDEX IF NOT EXISTS idx_motion_labels ON motion_labels(hash40, fighter_id);
}

%downgrade 0 {
DROP TABLE IF EXISTS stream_recording_sources;
DROP TABLE IF EXISTS switch_info;
DROP TABLE IF EXISTS scores;
DROP TABLE IF EXISTS game_groups;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS game_videos;
DROP TABLE IF EXISTS game_players;
DROP TABLE IF EXISTS event_games;
DROP TABLE IF EXISTS tournament_games;
DROP TABLE IF EXISTS games;
DROP TABLE IF EXISTS team_members;
DROP TABLE IF EXISTS teams;
DROP TABLE IF EXISTS round_types;
DROP TABLE IF EXISTS events;
DROP TABLE IF EXISTS event_types;
DROP TABLE IF EXISTS set_formats;
DROP TABLE IF EXISTS tournament_commentators;
DROP TABLE IF EXISTS tournament_sponsors;
DROP TABLE IF EXISTS tournament_organizers;
DROP TABLE IF EXISTS tournaments;
DROP TABLE IF EXISTS people;
DROP TABLE IF EXISTS sponsors;
DROP TABLE IF EXISTS video_paths;
DROP TABLE IF EXISTS videos;
DROP TABLE IF EXISTS motion_labels;
DROP TABLE IF EXISTS motion_usages;
DROP TABLE IF EXISTS motion_categories;
DROP TABLE IF EXISTS motion_layers;
DROP TABLE IF EXISTS motion_groups;
DROP TABLE IF EXISTS motions;
DROP TABLE IF EXISTS status_enums;
DROP TABLE IF EXISTS hit_status_enums;
DROP TABLE IF EXISTS fighters;
DROP TABLE IF EXISTS stages;

DROP INDEX IF EXISTS idx_motion_labels;
DROP INDEX IF EXISTS idx_games_timestamps;
DROP INDEX IF EXISTS idx_motions_hash40;
}

%query transaction,begin() {
    type insert
    stmt { BEGIN TRANSACTION; }
}
%query transaction,commit() {
    type insert
    stmt { COMMIT TRANSACTION; }
}
%query transaction,rollback() {
    type insert
    stmt { ROLLBACK TRANSACTION; }
}
%query transaction,begin_nested(struct str_view name) {
    type insert
    stmt { SAVEPOINT ?; }
}
%query transaction,commit_nested(struct str_view name) {
    type insert
    stmt { RELEASE SAVEPOINT ?; }
}
%query transaction,rollback_nested(struct str_view name) {
    type insert
    stmt { ROLLBACK TO SAVEPOINT ?; }
}
%query motion,add(uint64_t hash40, struct str_view string) {
    type insert
    table motions
}
%query motion,exists(uint64_t hash40) {
    type exists
    table motions
}
%query motion,string(uint64_t hash40) {
    type select-first
    table motions
    callback const char* string
}
%query motion_label,add_or_get_group(struct str_view name) {
    type insert
    table motion_groups
    return id
}
%query motion_label,add_or_get_layer(int group_id, struct str_view name) {
    type insert
    stmt {
        WITH priorities AS (
            WITH list(id) AS (VALUES(0))
            SELECT IFNULL(priority, 0) + 1 priority FROM test
            FULL OUTER JOIN list USING(id)
            ORDER BY priority DESC LIMIT 1)
        INSERT INTO motion_layers (group_id, priority, name)
        VALUES (?, (SELECT priority FROM priorities), ?)
        ON CONFLICT DO UPDATE SET group_id=excluded.group_id
        RETURNING id;
    }
    return id
}
%query motion_label,add_or_get_category(struct str_view name) {
    type insert
    table motion_categories
    return id
}
%query motion_label,add_or_get_usage(struct str_view name) {
    type insert
    table motion_usages
    return id
}
%query motion_label,add_or_get_label(
        uint64_t hash40,
        int fighter_id,
        int layer_id,
        int category_id,
        int usage_id,
        struct str_view label) {
    type insert
    table motion_labels
    return id
}
%query motion_label,to_motions(int fighter_id, struct str_view label) {
    type select-all
    table motion_labels
    callback uint64_t hash40
}
%query motion_label,to_notation_label(int fighter_id, uint64_t hash40, int usage_id) {
    type select-first
    stmt {
        SELECT label FROM motion_labels
        JOIN motion_layers ON motion_layers.id=motion_labels.layer_id
        WHERE fighter_id=? AND hash40=? AND usage_id=? AND label <> ''
        ORDER BY priority ASC
        LIMIT 1;
    }
    callback const char* label
}
%query fighter,add(int id, struct str_view name) {
    type insert
    table fighters
}
%query fighter,get_name(int id) {
    type select-first
    table fighters
    callback const char* name
}
%query stage,add(int id, struct str_view name) {
    type insert
    table stages
}
%query status_enum,add(int fighter_id null, int value, struct str_view name) {
    type insert
    table status_enums
}
%query hit_status_enum,add(int id, struct str_view name) {
    type insert
    table hit_status_enums
}
%query tournament,add_or_get(struct str_view name, struct str_view website) {
    type insert
    table tournaments
    return id
}
%query tournament,add_sponsor(int tournament_id, int sponsor_id) {
    type insert
    table tournament_sponsors
}
%query tournament,add_organizer(int tournament_id, int person_id) {
    type insert
    table tournament_organizers
}
%query tournament,add_commentator(int tournament_id, int person_id) {
    type insert
    table tournament_commentators
}
%query event,add_or_get_type(struct str_view name) {
    type insert
    table event_types
    return id
}
%query event,add_or_get(int event_type_id, struct str_view url) {
    type insert
    table events
    return id
}
%query round,add_or_get_type(struct str_view short_name, struct str_view long_name) {
    type insert
    table round_types
    return id
}
%query set_format,add_or_get(struct str_view short_name, struct str_view long_name) {
    type insert
    table set_formats
    return id
}
%query team,add_or_get(struct str_view name, struct str_view url) {
    type insert
    table teams
    return id
}
%query team,add_member(int team_id, int person_id) {
    type insert
    table team_members
}
%query sponsor,add_or_get(struct str_view short_name, struct str_view full_name, struct str_view website) {
    type insert
    table sponsors
    return id
}
%query person,add_or_get(
        int sponsor_id,
        struct str_view name,
        struct str_view tag,
        struct str_view social,
        struct str_view pronouns) {
    type insert
    table people
    return id
}
%query person,merge_social_and_pronouns(int id, struct str_view social, struct str_view pronouns) {
    type insert
    stmt {
        UPDATE people
        SET
            social = CASE WHEN social='' THEN ? ELSE social END,
            pronouns = CASE WHEN pronouns='' THEN ? ELSE pronouns END
        WHERE id = ?;
    }
    bind social, pronouns, id
}
%query person,get_id_from_name(struct str_view name) {
    type select-first
    table people
    return id
}
%query person,get_team_id_from_name(struct str_view name) {
    type select-first
    stmt {
        SELECT team_id
        FROM team_members
        JOIN people ON team_members.person_id=people.id
        WHERE name=?;
    }
    return team_id
}
%query person,set_tag(int id, struct str_view tag) {
    type update tag
    table people
}
%query person,set_social(int id, struct str_view social) {
    type update social
    table people
}
%query person,set_pronouns(int id, struct str_view pronouns) {
    type update pronouns
    table people
}
%query game,exists_1v1(int p1_id, int p2_id, uint64_t time_started) {
    type exists
    stmt {
        WITH matches AS (
            WITH t(person_id) AS (VALUES (?), (?))
            SELECT COUNT(*) count FROM games
            JOIN game_players ON game_players.game_id=games.id
            JOIN t ON t.person_id=game_players.person_id
            WHERE time_started=?
            GROUP BY games.id)
        SELECT 1 FROM matches
        WHERE count=2;
    }
}
%query game,exists_2v2(int p1_id, int p2_id, int p3_id, int p4_id, uint64_t time_started) {
    type exists
    stmt {
        WITH matches AS (
            WITH t(person_id) AS (VALUES (?), (?), (?), (?))
            SELECT COUNT(*) count FROM games
            JOIN game_players ON game_players.game_id=games.id
            JOIN t ON t.person_id=game_players.person_id
            WHERE time_started=?
            GROUP BY games.id)
        SELECT 1 FROM matches
        WHERE count=2;
    }
}
%query game,count() {
    type select-first
    stmt { SELECT COUNT(*) FROM games; }
    return count
}
%query game,add(
        int round_type_id null,
        int round_number null,
        int set_format_id,
        int winner_team_id,
        int stage_id,
        uint64_t time_started,
        int duration) {
    type insert
    table games
    return id
}
%query game,get_all() {
    type select-all
    /*
     * Each game has T number of teams, and P number of players per team.
     * This query is designed to return a list of unique games. Therefore,
     * we must first group all players into their respective teams in a
     * subquery, then group those teams again per game in the final query.
     *
     * Player-specific columns are group-concatenated with "+" as a delimiter.
     * Team-specific columns are group-concatenated with "," as a delimiter.
     * This means e.g. in a 2v2 situation, the tags will appear as "P1+P2,P3+P4"
     * in the final output.
     */
    stmt {
        WITH grouped_teams AS (
            WITH grouped_players AS (
                SELECT
                    game_id,
                    team_id,
                    GROUP_CONCAT(game_players.slot, '+') slots,
                    GROUP_CONCAT(game_players.fighter_id, '+') fighter_ids,
                    GROUP_CONCAT(game_players.costume, '+') costumes,
                    GROUP_CONCAT(REPLACE(people.name, '+', '\\+'), '+') player_names,
                    GROUP_CONCAT(REPLACE(people.tag, '+', '\\+'), '+') player_tags
                FROM game_players
                INNER JOIN people ON people.id = game_players.person_id
                GROUP BY game_id, team_id
                ORDER BY slot)
            SELECT
                grouped_players.game_id,
                GROUP_CONCAT(grouped_players.slots, ',') slots,
                GROUP_CONCAT(grouped_players.fighter_ids, ',') fighter_ids,
                GROUP_CONCAT(grouped_players.costumes, ',') costumes,
                GROUP_CONCAT(grouped_players.player_names, ',') player_names,
                GROUP_CONCAT(grouped_players.player_tags, ',') player_tags,
                GROUP_CONCAT(REPLACE(teams.name, ',', '\\,'), ',') teams,
                GROUP_CONCAT(scores.score) scores
            FROM grouped_players
            INNER JOIN teams ON teams.id = grouped_players.team_id
            INNER JOIN scores
                ON scores.team_id = grouped_players.team_id
                AND scores.game_id = grouped_players.game_id
            GROUP BY grouped_players.game_id)
        SELECT
            grouped_teams.game_id,
            IFNULL(events.id, -1) event_id,
            games.time_started,
            games.duration,
            IFNULL(tournaments.name, '') tournament,
            IFNULL(event_types.name, '') event,
            IFNULL(stages.name, '') stage,
            IFNULL(round_types.short_name, '') || IFNULL(round_number, '') round,
            set_formats.short_name format,
            grouped_teams.scores,
            grouped_teams.slots,
            grouped_teams.teams,
            grouped_teams.player_names,
            grouped_teams.fighter_ids,
            grouped_teams.costumes
        FROM grouped_teams
        INNER JOIN games ON games.id = grouped_teams.game_id
        INNER JOIN set_formats ON set_formats.id = games.set_format_id
        LEFT JOIN tournament_games ON tournament_games.game_id=grouped_teams.game_id
        LEFT JOIN tournaments ON tournaments.id = tournament_games.tournament_id
        LEFT JOIN event_games ON event_games.game_id = grouped_teams.game_id
        LEFT JOIN events ON events.id = event_games.event_id
        LEFT JOIN event_types ON event_types.id = events.event_type_id
        LEFT JOIN stages ON stages.id = games.stage_id
        LEFT JOIN round_types ON round_types.id = games.round_type_id
        ORDER BY games.time_started DESC;
    }
    callback
        int game_id,
        int event_id,
        uint64_t time_started,
        int duration,
        const char* tournament,
        const char* event,
        const char* stage,
        const char* round,
        const char* format,
        const char* scores,
        const char* slots,
        const char* teams,
        const char* players,
        const char* fighter_ids,
        const char* costumes
}
%query game,get_events() {
    type select-all
    stmt {
        SELECT
            DATE(time_started/1000, 'unixepoch') date,
            IFNULL(event_types.name, ''),
            IFNULL(event_id, -1)
        FROM games
        LEFT JOIN event_games ON event_games.game_id=games.id
        LEFT JOIN events ON events.id=event_id
        LEFT JOIN event_types ON event_types.id=event_type_id
        GROUP BY date, event_types.name
        ORDER BY event_types.name;
    }
    callback
        const char* date,
        const char* name,
        int event_id
}
%query game,get_all_in_event(int event_id, struct str_view date) {
    type select-all
    stmt {
        WITH grouped_games AS (
            SELECT
                event_id,
                games.id,
                time_started,
                duration,
                round_type_id,
                round_number,
                set_format_id,
                winner_team_id,
                stage_id,
                teams.name team_name,
                IFNULL(scores.score, '') scores,
                group_concat(game_players.costume, '+') costumes,
                group_concat(game_players.slot, '+') slots,
                group_concat(REPLACE(people.name, '+', '\\+'), '+') players,
                group_concat(REPLACE(IFNULL(sponsors.short_name, ''), '+', '\\+'), '+') sponsors,
                group_concat(REPLACE(IFNULL(fighters.name, game_players.fighter_id), '+', '\\+'), '+') fighters
            FROM game_players
            INNER JOIN games ON games.id = game_players.game_id
            LEFT JOIN event_games ON event_games.game_id = games.id
            INNER JOIN teams ON teams.id = game_players.team_id
            LEFT JOIN scores ON scores.team_id = game_players.team_id AND scores.game_id = game_players.game_id
            INNER JOIN people ON people.id = game_players.person_id
            LEFT JOIN fighters ON fighters.id = game_players.fighter_id
            LEFT JOIN sponsors ON sponsors.id = people.sponsor_id
            WHERE
                AND (event_id IS ? OR event_id = ?)
                DATE(time_started/1000, 'unixepoch') = ?
            GROUP BY games.id, game_players.team_id
            ORDER BY game_players.slot)
        SELECT
            grouped_games.id
            time_started,
            duration,
            IFNULL(tournaments.name, '') tourney,
            IFNULL(event_types.name, '') event,
            IFNULL(stages.name, grouped_games.stage_id) stage,
            IFNULL(round_types.short_name, '') || IFNULL(round_number, '') round,
            set_formats.short_name format,
            group_concat(REPLACE(grouped_games.team_name, ',', '\\,')) teams,
            group_concat(grouped_games.scores) score,
            group_concat(grouped_games.slots) slots,
            group_concat(REPLACE(IFNULL(grouped_games.sponsors, ''), ',', '\\,')) sponsors,
            group_concat(REPLACE(grouped_games.players, ',', '\\,')) players,
            group_concat(REPLACE(grouped_games.fighters, ',', '\\,')) fighters,
            group_concat(grouped_games.costumes) costumes
        FROM grouped_games
        LEFT JOIN tournament_games ON tournament_games.game_id = grouped_games.id
        LEFT JOIN tournaments ON tournament_games.tournament_id = tournaments.id
        LEFT JOIN events ON event_id = events.id
        LEFT JOIN event_types ON event_types.id = events.event_type_id
        LEFT JOIN stages ON stages.id = grouped_games.stage_id
        LEFT JOIN round_types ON grouped_games.round_type_id = round_types.id
        INNER JOIN set_formats ON grouped_games.set_format_id = set_formats.id
        GROUP BY grouped_games.id
        ORDER BY time_started DESC;

    }
    /*
     * Because we would like the be able to match NULL as well as regular
     * values within the same statement, we bind event_id twice for the
     * (event_id IS ? OR event_id = ?) statement.
     */
    bind event_id, event_id, date
    callback
        int game_id,
        uint64_t time_started,
        int duration,
        const char* tournament,
        const char* event,
        const char* stage,
        const char* round,
        const char* format,
        const char* teams,
        const char* scores,
        const char* slots,
        const char* sponsors,
        const char* players,
        const char* fighters,
        const char* costumes
}
%query game,associate_tournament(int game_id, int tournament_id) {
    type insert
    table tournament_games
}
%query game,associate_event(int game_id, int event_id) {
    type insert
    table event_games
}
%query game,associate_video(int game_id, int video_id, int64_t frame_offset) {
    type insert
    table game_videos
}
%query game,unassociate_video(int game_id, int video_id) {
    type delete
    table game_videos
}
%query game,get_videos(int game_id) {
    type select-all
    stmt {
        SELECT video_id, file_name, path_hint, frame_offset
        FROM game_videos
        JOIN videos ON game_videos.video_id = videos.id
        WHERE game_videos.game_id = ?;
    }
    callback int video_id, const char* file_name, const char* path_hint, int64_t frame_offset
}
%query game,set_frame_offset(int game_id, int video_id, int64_t frame_offset) {
    type update frame_offset
    table game_videos
}
%query game,add_player(
        int person_id,
        int game_id,
        int slot,
        int team_id,
        int fighter_id,
        int costume,
        int is_loser_side) {
    type insert
    table game_players
}
%query group,add_or_get(struct str_view name) {
    type insert
    table groups
    return id
}
%query group,add_game(int group_id, int game_id) {
    type insert
    table game_groups
}
%query video,add_or_get(struct str_view file_name, struct str_view path_hint) {
    type insert
    table videos
    return id
}
%query video,set_path_hint(struct str_view file_name, struct str_view path_hint) {
    type update path_hint
    table videos
}
%query video,add_path(struct str_view path) {
    type insert
    table video_paths
}
%query video,get_paths() {
    type select-all
    table video_paths
    callback const char* path
}
%query score,add(int game_id, int team_id, int score) {
    type insert
    table scores
}
%query switch_info,add(struct str_view name, struct str_view ip, uint16_t port) {
    type insert
    table switch_info
}
%query stream_recording_sources,add(struct str_view path, int64_t frame_offset) {
    type insert
    table stream_recording_sources
}

%source-preamble {
void
log_sql_err(int error_code, const char* error_code_str, const char* error_msg)
{
    log_err("%s (%d): %s\n", error_code_str, error_code, error_msg);
}
}

%source-postamble {
#if defined(VH_MEM_DEBUGGING)
static void* dbgmem_malloc(int size) { return mem_alloc((mem_size)size); }
static void* dbgmem_realloc(void* p, int size) { return mem_realloc(p, (mem_size)size); }
static int dbgmem_allocated_size(void* p) { return (int)mem_allocated_size(p); }
static int dbgmem_roundup(int size) { return size; }
static int dbgmem_init(void* user) { (void)user; return 0; }
static void dbgmem_deinit(void* user) { (void)user; }

static struct sqlite3_mem_methods vh_mem_sqlite = {
    dbgmem_malloc,
    mem_free,
    dbgmem_realloc,
    dbgmem_allocated_size,
    dbgmem_roundup,
    dbgmem_init,
    dbgmem_deinit,
    NULL
};
#endif

int
db_init(void)
{
#if defined(VH_MEM_DEBUGGING)
    sqlite3_config(SQLITE_CONFIG_MALLOC, &vh_mem_sqlite);
#endif

    if (sqlite3_initialize() != SQLITE_OK)
        return -1;
    return 0;
}

void
db_deinit(void)
{
    sqlite3_shutdown();
}
}
